{"version":3,"sources":["Components/inputPage.jsx","Components/listingPage.jsx","App.js","serviceWorker.js","index.js"],"names":["input","state","name","startDate","Date","handleChange","e","setState","target","id","value","handleDateChange","date","handleSubmit","preventDefault","axios","post","then","response","status","alert","catch","error","console","log","type","onChange","this","content","selected","onClick","Component","listing","list","all","isDataInitialized","sortAlphabetically","arrayCopy","sort","a","b","full_name","localeCompare","sortByTime","get","newDataFromServer","data","length","map","currentuser","key","user_id","dob","handleDelete","List","App","className","to","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.9d82a2a1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport DatePicker from \"react-datepicker\";\r\n\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\n\r\nclass input extends Component {\r\n  state = {\r\n    name: \"\",\r\n    startDate: new Date(),\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.id]: e.target.value,\r\n    });\r\n  };\r\n\r\n  handleDateChange = (date) => {\r\n    this.setState({\r\n      startDate: date,\r\n    });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    axios\r\n      .post(\"/add\", {\r\n        name: this.state.name,\r\n        date: this.state.startDate,\r\n      })\r\n      .then((response) => {\r\n        if (response.status == 200) {\r\n          alert(\"User added !!\");\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <form>\r\n          <label>Enter Name </label>\r\n          <input\r\n            id=\"name\"\r\n            type=\"text\"\r\n            onChange={this.handleChange}\r\n            value={this.state.content}\r\n          />\r\n          <br />\r\n          <br />\r\n          <label>Date of Birth </label>\r\n          <DatePicker\r\n            selected={this.state.startDate}\r\n            onChange={this.handleDateChange}\r\n          />\r\n        </form>\r\n        <button onClick={this.handleSubmit}>Submit</button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default input;\r\n","import React, { Component } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport axios from \"axios\";\r\n\r\nclass listing extends Component {\r\n  state = {\r\n    list: [],\r\n    all: [],\r\n    isDataInitialized: false,\r\n  };\r\n\r\n  async componentDidMount() {\r\n    await axios.get(\"/show\").then((newDataFromServer) => {\r\n      this.setState({\r\n        list: newDataFromServer.data,\r\n        all: newDataFromServer.data,\r\n        isDataInitialized: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  async handleDelete(id) {\r\n    console.log(id);\r\n    await axios\r\n      .get(`/delete/${id}`)\r\n      .then((response) => {\r\n        if (response.status == 200) {\r\n          alert(`deleted successfully.....!! `);\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n    await axios.get(\"/show\").then((newDataFromServer) => {\r\n      this.setState({\r\n        list: newDataFromServer.data,\r\n        all: newDataFromServer.data,\r\n        isDataInitialized: true,\r\n      });\r\n    });\r\n  }\r\n\r\n  List() {\r\n    console.log(this.state.list[0]);\r\n    console.log(this.state.isDataInitialized);\r\n    if (this.state.list.length) {\r\n      return this.state.list.map((currentuser) => {\r\n        return (\r\n          <div key={currentuser.user_id}>\r\n            <li>\r\n              {currentuser.full_name + \",     \"}\r\n              {currentuser.dob + \"     ,\"}\r\n              <button onClick={() => this.handleDelete(currentuser.user_id)}>\r\n                delete\r\n              </button>\r\n            </li>\r\n          </div>\r\n        );\r\n      });\r\n    } else {\r\n      return (\r\n        <div>\r\n          <h2>Sorry!! No results found.</h2>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  sortAlphabetically = () => {\r\n    const arrayCopy = [...this.state.all];\r\n    arrayCopy.sort((a, b) => a.full_name.localeCompare(b.full_name));\r\n    this.setState({ list: arrayCopy });\r\n  };\r\n\r\n  sortByTime = () => {\r\n    this.setState({ list: this.state.all });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        {!this.state.isDataInitialized && <div>Initializing data...</div>}\r\n        {this.state.isDataInitialized && (\r\n          <div>\r\n            <ul>{this.List()}</ul>\r\n            <button onClick={this.sortAlphabetically}>\r\n              Sort Alphabetically\r\n            </button>\r\n            <button onClick={this.sortByTime}>Sort By Time</button>\r\n          </div>\r\n        )}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default listing;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Input from \"./Components/inputPage\";\nimport Listing from \"./Components/listingPage\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <div>\n          <nav>\n            <ul>\n              <li>\n                <Link to=\"/listing\">Listing page</Link>\n              </li>\n              <li>\n                <Link to=\"/input\">Input page</Link>\n              </li>\n            </ul>\n          </nav>\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/listing\">\n              <Listing />\n            </Route>\n            <Route path=\"/input\">\n              <Input />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}